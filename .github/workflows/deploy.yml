# name: Deploy to Production
# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     environment: staging
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: yarn install --frozen-lockfile

#       - name: Build the project
#         run: yarn build
#         env:
#           DATABASE_PROVIDER: postgresql
#           DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
#           DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

#       - name: Run Production Migrations
#         run: yarn prisma migrate deploy --schema=prisma/schema.prisma
#         env:
#           DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
#           DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

#       - name: Seed Production Database
#         run: yarn prisma:seed:prod
#         env:
#           DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
#           DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

#       - name: Deploy to Vercel
#         uses: amondnet/vercel-action@v25
#         with:
#           vercel-token: ${{ secrets.VERCEL_TOKEN }}
#           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#         env:
#           DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
#           DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

name: Deploy to Production
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Setup the Node.js environment you need (16.x, 18.x, etc.)
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Install dependencies using yarn + handle frozen lockfile + legacy peer deps
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile --legacy-peer-deps

      # (Optional) Validate everything before continuing: 
      # e.g. run ESLint, type-checks, or other checks
      # - name: Lint
      #   run: yarn lint

      # Generate the Prisma schema from your template.
      # This replaces $PROVIDER$ with 'postgresql' for production
      - name: Generate Prisma schema
        run: |
          yarn ts-node --compiler-options '{"module":"CommonJS"}' prisma/generate-schema.ts
        env:
          DATABASE_PROVIDER: postgresql  # Overwrite for production
          # If you'd rather define it as secrets, you can do:
          # DATABASE_PROVIDER: ${{ secrets.PROD_DATABASE_PROVIDER }}

      # Generate Prisma Client from the newly generated schema.prisma
      - name: Generate Prisma Client
        run: |
          yarn prisma generate --schema=prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

      # Deploy migrations to your production DB
      - name: Deploy Production Migrations
        run: |
          yarn prisma migrate deploy --schema=prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

      # Seed the Production Database (if you have a special script)
      - name: Seed Production Database
        run: |
          yarn prisma:seed:prod
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

      # Build your Next.js project
      - name: Build Next.js App
        run: |
          yarn build
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}

      # Deploy to Vercel with environment variables
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PROD_DIRECT_URL }}
          DATABASE_PROVIDER: postgresql